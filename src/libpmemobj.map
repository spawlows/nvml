#
# Copyright (c) 2014, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of Intel Corporation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# src/libpmemobj.map -- linker map file for libpmemobj
#
libpmemobj.so {
	global:
		pmemobj_pool_open;
		pmemobj_pool_open_mirrored;
		pmemobj_pool_close;
		pmemobj_pool_check;
		pmemobj_pool_check_mirrored;
		pmemobj_mutex_init;
		pmemobj_mutex_lock;
		pmemobj_mutex_unlock;
		pmemobj_rwlock_init;
		pmemobj_rwlock_rdlock;
		pmemobj_rwlock_wrlock;
		pmemobj_rwlock_timedrdlock;
		pmemobj_rwlock_timedwrlock;
		pmemobj_rwlock_tryrdlock;
		pmemobj_rwlock_trywrlock;
		pmemobj_rwlock_unlock;
		pmemobj_cond_init;
		pmemobj_cond_broadcast;
		pmemobj_cond_signal;
		pmemobj_cond_timedwait;
		pmemobj_cond_wait;
		pmemobj_root;
		pmemobj_root_direct;
		pmemobj_root_resize;
		pmemobj_tx_begin;
		pmemobj_tx_begin_lock;
		pmemobj_tx_begin_wrlock;
		pmemobj_tx_commit;
		pmemobj_tx_commit_tid;
		pmemobj_tx_commit_multi;
		pmemobj_tx_commit_multiv;
		pmemobj_tx_abort;
		pmemobj_tx_abort_tid;
		pmemobj_alloc;
		pmemobj_zalloc;
		pmemobj_realloc;
		pmemobj_aligned_alloc;
		pmemobj_strdup;
		pmemobj_free;
		pmemobj_alloc_tid;
		pmemobj_zalloc_tid;
		pmemobj_realloc_tid;
		pmemobj_aligned_alloc_tid;
		pmemobj_strdup_tid;
		pmemobj_free_tid;
		pmemobj_size;
		pmemobj_direct;
		pmemobj_direct_ntx;
		pmemobj_nulloid;
		pmemobj_memcpy;
		pmemobj_memcpy_tid;
	local:
		*;
};
